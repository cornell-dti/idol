{"version":3,"sources":["SignIn/SignIn.module.css","static/images/google-logo.png","../node_modules/semantic-ui-react/dist/es/elements/Divider/Divider.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardDescription.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardHeader.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardMeta.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js","../node_modules/semantic-ui-react/dist/es/views/Card/CardGroup.js","../node_modules/semantic-ui-react/dist/es/views/Card/Card.js","SignIn/SignIn.tsx"],"names":["module","exports","Divider","props","children","className","clearing","content","fitted","hidden","horizontal","inverted","section","vertical","classes","cx","useKeyOnly","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","CardDescription","textAlign","useTextAlignProp","CardHeader","CardMeta","CardContent","description","extra","header","meta","createShorthand","val","autoGenerateKey","CardGroup","centered","doubling","items","itemsPerRow","stackable","useWidthProp","itemsJSX","_map","item","key","join","Card","_Component","_this","_len","arguments","length","args","Array","_key","call","apply","this","concat","handleClick","e","onClick","_inheritsLoose","prototype","render","_this$props","color","fluid","href","image","link","raised","Image","create","defaultProps","ui","wrapped","Component","Content","Description","Group","Header","Meta","SignIn","styles","data-testid","as","Icon","name","size","src","GoogleLogo","Button","basic","auth","signInWithPopup","provider"],"mappings":"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","file":"static/js/3.c18ae72f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SignIn\":\"SignIn_SignIn__3UnCu\",\"content\":\"SignIn_content__2_wvd\",\"header\":\"SignIn_header__HzFmO\"};","module.exports = __webpack_public_path__ + \"static/media/google-logo.ff629c02.png\";","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A divider visually segments content into groups.\n */\n\nfunction Divider(props) {\n  var children = props.children,\n      className = props.className,\n      clearing = props.clearing,\n      content = props.content,\n      fitted = props.fitted,\n      hidden = props.hidden,\n      horizontal = props.horizontal,\n      inverted = props.inverted,\n      section = props.section,\n      vertical = props.vertical;\n  var classes = cx('ui', useKeyOnly(clearing, 'clearing'), useKeyOnly(fitted, 'fitted'), useKeyOnly(hidden, 'hidden'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(inverted, 'inverted'), useKeyOnly(section, 'section'), useKeyOnly(vertical, 'vertical'), 'divider', className);\n  var rest = getUnhandledProps(Divider, props);\n  var ElementType = getElementType(Divider, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nDivider.handledProps = [\"as\", \"children\", \"className\", \"clearing\", \"content\", \"fitted\", \"hidden\", \"horizontal\", \"inverted\", \"section\", \"vertical\"];\nDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Divider can clear the content above it. */\n  clearing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Divider can be fitted without any space above or below it. */\n  fitted: PropTypes.bool,\n\n  /** Divider can divide content without creating a dividing line. */\n  hidden: PropTypes.bool,\n\n  /** Divider can segment content horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Divider can have its colours inverted. */\n  inverted: PropTypes.bool,\n\n  /** Divider can provide greater margins to divide sections of content. */\n  section: PropTypes.bool,\n\n  /** Divider can segment content vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Divider;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a description with one or more paragraphs.\n */\n\nfunction CardDescription(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'description', className);\n  var rest = getUnhandledProps(CardDescription, props);\n  var ElementType = getElementType(CardDescription, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardDescription.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardDescription.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardDescription;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain a header.\n */\n\nfunction CardHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'header', className);\n  var rest = getUnhandledProps(CardHeader, props);\n  var ElementType = getElementType(CardHeader, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card header can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardHeader;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useTextAlignProp } from '../../lib';\n/**\n * A card can contain content metadata.\n */\n\nfunction CardMeta(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      textAlign = props.textAlign;\n  var classes = cx(useTextAlignProp(textAlign), 'meta', className);\n  var rest = getUnhandledProps(CardMeta, props);\n  var ElementType = getElementType(CardMeta, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCardMeta.handledProps = [\"as\", \"children\", \"className\", \"content\", \"textAlign\"];\nCardMeta.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A card meta can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardMeta;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useWidthProp } from '../../lib';\nimport Card from './Card';\n/**\n * A group of cards.\n */\n\nfunction CardGroup(props) {\n  var centered = props.centered,\n      children = props.children,\n      className = props.className,\n      content = props.content,\n      doubling = props.doubling,\n      items = props.items,\n      itemsPerRow = props.itemsPerRow,\n      stackable = props.stackable,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(centered, 'centered'), useKeyOnly(doubling, 'doubling'), useKeyOnly(stackable, 'stackable'), useTextAlignProp(textAlign), useWidthProp(itemsPerRow), 'cards', className);\n  var rest = getUnhandledProps(CardGroup, props);\n  var ElementType = getElementType(CardGroup, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  var itemsJSX = _map(items, function (item) {\n    var key = item.key || [item.header, item.description].join('-');\n    return /*#__PURE__*/React.createElement(Card, _extends({\n      key: key\n    }, item));\n  });\n\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), itemsJSX);\n}\n\nCardGroup.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"content\", \"doubling\", \"items\", \"itemsPerRow\", \"stackable\", \"textAlign\"];\nCardGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A group of cards can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A group of cards can double its column width for mobile. */\n  doubling: PropTypes.bool,\n\n  /** Shorthand array of props for Card. */\n  items: customPropTypes.collectionShorthand,\n\n  /** A group of cards can set how many cards should exist in a row. */\n  itemsPerRow: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A group of cards can automatically stack rows to a single columns on mobile devices. */\n  stackable: PropTypes.bool,\n\n  /** A card group can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\nimport Image from '../../elements/Image';\nimport CardContent from './CardContent';\nimport CardDescription from './CardDescription';\nimport CardGroup from './CardGroup';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card displays site content in a manner similar to a playing card.\n */\n\nvar Card = /*#__PURE__*/function (_Component) {\n  _inheritsLoose(Card, _Component);\n\n  function Card() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _Component.call.apply(_Component, [this].concat(args)) || this;\n\n    _this.handleClick = function (e) {\n      var onClick = _this.props.onClick;\n      if (onClick) onClick(e, _this.props);\n    };\n\n    return _this;\n  }\n\n  var _proto = Card.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        centered = _this$props.centered,\n        children = _this$props.children,\n        className = _this$props.className,\n        color = _this$props.color,\n        content = _this$props.content,\n        description = _this$props.description,\n        extra = _this$props.extra,\n        fluid = _this$props.fluid,\n        header = _this$props.header,\n        href = _this$props.href,\n        image = _this$props.image,\n        link = _this$props.link,\n        meta = _this$props.meta,\n        onClick = _this$props.onClick,\n        raised = _this$props.raised;\n    var classes = cx('ui', color, useKeyOnly(centered, 'centered'), useKeyOnly(fluid, 'fluid'), useKeyOnly(link, 'link'), useKeyOnly(raised, 'raised'), 'card', className);\n    var rest = getUnhandledProps(Card, this.props);\n    var ElementType = getElementType(Card, this.props, function () {\n      if (onClick) return 'a';\n    });\n\n    if (!childrenUtils.isNil(children)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), children);\n    }\n\n    if (!childrenUtils.isNil(content)) {\n      return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), content);\n    }\n\n    return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n      className: classes,\n      href: href,\n      onClick: this.handleClick\n    }), Image.create(image, {\n      autoGenerateKey: false,\n      defaultProps: {\n        ui: false,\n        wrapped: true\n      }\n    }), (description || header || meta) && /*#__PURE__*/React.createElement(CardContent, {\n      description: description,\n      header: header,\n      meta: meta\n    }), extra && /*#__PURE__*/React.createElement(CardContent, {\n      extra: true\n    }, extra));\n  };\n\n  return Card;\n}(Component);\n\nCard.handledProps = [\"as\", \"centered\", \"children\", \"className\", \"color\", \"content\", \"description\", \"extra\", \"fluid\", \"header\", \"href\", \"image\", \"link\", \"meta\", \"onClick\", \"raised\"];\nexport { Card as default };\nCard.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** A Card can center itself inside its container. */\n  centered: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A Card can be formatted to display different colors. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** Shorthand for primary content of CardContent. */\n  extra: customPropTypes.contentShorthand,\n\n  /** A Card can be formatted to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: PropTypes.string,\n\n  /** A card can contain an Image component. */\n  image: customPropTypes.itemShorthand,\n\n  /** A card can be formatted to link to other content. */\n  link: PropTypes.bool,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /**\n   * Called on click. When passed, the component renders as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func,\n\n  /** A Card can be formatted to raise above the page. */\n  raised: PropTypes.bool\n} : {};\nCard.Content = CardContent;\nCard.Description = CardDescription;\nCard.Group = CardGroup;\nCard.Header = CardHeader;\nCard.Meta = CardMeta;","import React from 'react';\nimport styles from './SignIn.module.css';\nimport { Button, Card, Image, Divider, Header, Icon } from 'semantic-ui-react';\nimport GoogleLogo from '../static/images/google-logo.png';\nimport { auth, provider } from '../firebase';\n\nconst SignIn: React.FC = () => {\n  let onGoogleSignIn = () => {\n    auth.signInWithPopup(provider);\n  };\n  return (\n    <div className={styles.SignIn} data-testid=\"SignIn\">\n      <div className={styles.header}>\n        <Divider horizontal>\n          <Header as='h2'>\n            <Icon name='sign-in' />\n            Choose a sign-in method\n      </Header>\n        </Divider>\n      </div>\n      <div className={styles.content}>\n        <Card.Group>\n          <Card>\n            <Card.Content>\n              <Image\n                size='medium'\n                src={GoogleLogo}\n              />\n              <Card.Header>Google</Card.Header>\n              <Card.Description>\n                Sign in using Google OAuth2\n              </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n              <div className='ui one buttons'>\n                <Button basic color='blue' onClick={onGoogleSignIn}>\n                  Sign-In\n          </Button>\n              </div>\n            </Card.Content>\n          </Card>\n        </Card.Group>\n      </div>\n    </div >\n  )\n};\n\nexport default SignIn;\n"],"sourceRoot":""}