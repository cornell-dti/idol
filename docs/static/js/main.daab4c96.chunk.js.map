{"version":3,"sources":["SiteHeader/SiteHeader.module.css","static/images/dti-logo.png","firebase.ts","SignIn/SignIn.lazy.tsx","Homepage/Homepage.lazy.tsx","Cache/Cache.ts","API/MembersAPI.ts","EventEmitter/event-emitter.ts","EventEmitter/constant-emitters.ts","UserProvider/UserProvider.tsx","SiteHeader/SiteHeader.tsx","Modals/EmailNotFoundError/EmailNotFoundErrorModal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","firestore","provider","GoogleAuthProvider","LazySignIn","lazy","SignIn","props","fallback","LazyHomepage","Homepage","APICache","tag","value","this","cacheMap","set","get","lastVals","clear","has","Map","MembersAPI","funcName","name","Promise","resolve","retrieve","collection","then","val","cache","EventEmitter","subscribers","Set","subscriber","add","delete","event","Array","from","values","sub","Emitters","navOpenEmitter","emailNotFoundError","UserContext","createContext","user","UserProvider","initialLoad","getAllMembers","data","allMembers","docs","map","componentDidMount","onAuthStateChanged","userAuth","mem","email","findIndex","setState","emit","signOut","state","currentUser","Provider","children","Component","SiteHeader","className","styles","data-testid","content","logo_and_title","menu_icon_container","onClick","Icon","size","menu_icon","dti_logo","src","title_conainer","Header","title","as","sign_out_button_container","Button","sign_out_button","basic","color","EmailNotFoundErrorModal","useState","isOpen","setOpen","useEffect","cb","subscribe","unsubscribe","Modal","open","onClose","header","actions","key","negative","App","useContext","React","visible","setVisible","style","minHeight","minWidth","Sidebar","Pushable","Menu","animation","icon","inverted","onHide","vertical","width","to","Item","Pusher","dimmed","margin","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.daab4c96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"SiteHeader\":\"SiteHeader_SiteHeader__1lvnp\",\"content\":\"SiteHeader_content__29nP3\",\"logo_and_title\":\"SiteHeader_logo_and_title__2ChdE\",\"menu_icon_container\":\"SiteHeader_menu_icon_container__1KFSK\",\"menu_icon\":\"SiteHeader_menu_icon__3AHni\",\"title_conainer\":\"SiteHeader_title_conainer__kL5Pt\",\"title\":\"SiteHeader_title__TmzfH\",\"dti_logo\":\"SiteHeader_dti_logo__2cAkJ\",\"sign_out_button_container\":\"SiteHeader_sign_out_button_container__Ivt7I\",\"sign_out_button\":\"SiteHeader_sign_out_button__35q_C\"};","module.exports = __webpack_public_path__ + \"static/media/dti-logo.679b9757.png\";","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCCT5j588crPFvtKW5jM7Zkb_DLU_61VdY\",\n  authDomain: \"idol-b6c68.firebaseapp.com\",\n  databaseURL: \"https://idol-b6c68.firebaseio.com\",\n  projectId: \"idol-b6c68\",\n  storageBucket: \"idol-b6c68.appspot.com\",\n  messagingSenderId: \"223626581097\",\n  appId: \"1:223626581097:web:e80e98596d60486be03ef8\",\n  measurementId: \"G-90WYJ18WZX\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const provider = new firebase.auth.GoogleAuthProvider();","import React, { lazy, Suspense } from 'react';\n\nconst LazySignIn = lazy(() => import('./SignIn'));\n\nconst SignIn = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazySignIn {...props} />\n  </Suspense>\n);\n\nexport default SignIn;\n","import React, { lazy, Suspense } from 'react';\n\nconst LazyHomepage = lazy(() => import('./Homepage'));\n\nconst Homepage = (props: JSX.IntrinsicAttributes & { children?: React.ReactNode; }) => (\n  <Suspense fallback={null}>\n    <LazyHomepage {...props} />\n  </Suspense>\n);\n\nexport default Homepage;\n","export class APICache {\n\n  private static cacheMap: Map<string, any> = new Map();\n\n  static cache(tag: string, value: any) {\n    this.cacheMap.set(tag, value);\n  }\n\n  static retrieve<T>(tag: string): T {\n    return this.cacheMap.get(tag) as T;\n  }\n\n  static invalidate<T>(tag: string): T {\n    let lastVals = this.cacheMap.get(tag) as T;\n    this.cacheMap.clear();\n    return lastVals;\n  }\n\n  static has(tag: string): boolean {\n    return this.cacheMap.has(tag);\n  }\n\n}","import { firestore } from \"../firebase\";\nimport { APICache } from \"../Cache/Cache\";\n\nexport type Member = {\n  email: string,\n  first_name: string,\n  last_name: string,\n  role: string\n}\n\nexport class MembersAPI {\n\n  public static getAllMembers(): Promise<firebase.firestore.QuerySnapshot<firebase.firestore.DocumentData>> {\n    let funcName = this.name;\n    return APICache.has(funcName) ?\n      Promise.resolve(APICache.retrieve(funcName))\n      :\n      firestore.collection('members').get().then((val) => {\n        APICache.cache(funcName, val);\n        return val;\n      });\n  }\n\n}","export class EventEmitter<T> {\n\n  private subscribers: Set<(event: T) => any> = new Set();\n\n  subscribe(subscriber: (event: T) => any) {\n    this.subscribers.add(subscriber);\n  }\n\n  unsubscribe(subscriber: (event: T) => any) {\n    this.subscribers.delete(subscriber);\n  }\n\n  emit(event: T) {\n    let subs = Array.from(this.subscribers.values());\n    for (let sub of subs) {\n      sub(event);\n    }\n  }\n\n}","import { EventEmitter } from \"./event-emitter\";\n\nexport class Emitters {\n\n  // Navigation\n  static navOpenEmitter: EventEmitter<boolean> = new EventEmitter();\n\n  // Login\n  static emailNotFoundError: EventEmitter<void> = new EventEmitter();\n\n}","import React, { Component, createContext } from \"react\";\nimport { auth, firestore } from \"../firebase\";\nimport { MembersAPI, Member } from \"../API/MembersAPI\";\nimport { Emitters } from \"../EventEmitter/constant-emitters\";\n\ntype UserContextType = { user: firebase.User | null };\n\nexport const UserContext = createContext<UserContextType>({ user: null });\nclass UserProvider extends Component<any, UserContextType>  {\n\n  initialLoad: Promise<any> = Promise.resolve().then(() => {\n    return MembersAPI.getAllMembers().then(\n      (data) => {\n        this.allMembers = data.docs.map(val => val.data() as Member);\n      }\n    );\n  });\n  allMembers!: Member[];\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      user: auth.currentUser ? auth.currentUser : null\n    };\n  }\n\n  componentDidMount = () => {\n    auth.onAuthStateChanged(userAuth => {\n      this.initialLoad.then(\n        () => {\n          if (userAuth) {\n            if (this.allMembers.map(mem => mem.email).findIndex(email => email == userAuth.email) != -1) {\n              this.setState({ user: userAuth });\n            } else {\n              Emitters.emailNotFoundError.emit();\n              auth.signOut();\n            }\n          } else {\n            this.setState({ user: userAuth });\n          }\n        }\n      )\n    });\n  };\n  render() {\n    return (\n      <UserContext.Provider value={this.state}>\n        {this.props.children}\n      </UserContext.Provider>\n    );\n  }\n}\nexport default UserProvider;","import React from 'react';\nimport styles from './SiteHeader.module.css';\nimport { auth } from '../firebase';\nimport { Button, Header, Icon } from 'semantic-ui-react';\nimport dti_logo from '../static/images/dti-logo.png';\nimport { Emitters } from '../EventEmitter/constant-emitters';\n\nconst SiteHeader: React.FC = () => {\n  let onSignOut = () => {\n    auth.signOut();\n  };\n  return (\n    <div className={styles.SiteHeader} data-testid=\"SiteHeader\">\n      <div className={styles.content}>\n        <div className={styles.logo_and_title}>\n          <div className={styles.menu_icon_container} onClick={() => {\n            Emitters.navOpenEmitter.emit(true);\n          }}>\n            <Icon size=\"big\" className={styles.menu_icon} name=\"bars\" />\n          </div>\n          <img className={styles.dti_logo} src={dti_logo} />\n          <div className={styles.title_conainer}>\n            <Header className={styles.title} as=\"h1\">idol</Header>\n          </div>\n        </div>\n        <div className={styles.sign_out_button_container}>\n          <Button className={styles.sign_out_button} basic color='red' onClick={onSignOut}>\n            Sign Out\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n};\n\nexport default SiteHeader;\n","import React, { useState, useEffect } from 'react';\nimport styles from './EmailNotFoundErrorModal.module.css';\nimport { Modal, Button } from 'semantic-ui-react';\nimport { Emitters } from '../../EventEmitter/constant-emitters';\n\nconst EmailNotFoundErrorModal: React.FC = () => {\n  const [isOpen, setOpen] = useState(false);\n  useEffect(() => {\n    let cb = () => setOpen(true);\n    Emitters.emailNotFoundError.subscribe(cb);\n    return () => {\n      Emitters.emailNotFoundError.unsubscribe(cb);\n    }\n  });\n  return (\n    <Modal\n      open={isOpen}\n      onClose={() => setOpen(false)}\n      header=\"Couldn't find member with that email!\"\n      content='See a lead if you believe this is an error'\n      actions={[{ key: 'close', content: 'Close', negative: true }]}\n    />\n  )\n};\n\nexport default EmailNotFoundErrorModal;\n","import React, { useContext, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport SignIn from './SignIn/SignIn.lazy';\nimport Homepage from './Homepage/Homepage.lazy';\nimport { UserContext } from './UserProvider/UserProvider';\nimport SiteHeader from './SiteHeader/SiteHeader';\nimport { Sidebar, Segment, Menu, Icon, Header } from 'semantic-ui-react';\nimport { Emitters } from './EventEmitter/constant-emitters';\nimport EmailNotFoundErrorModal from './Modals/EmailNotFoundError/EmailNotFoundErrorModal';\n\nfunction App() {\n  const user = useContext(UserContext);\n  const [visible, setVisible] = React.useState(false);\n  useEffect(() => {\n    let cb = (isOpen: boolean) => {\n      setVisible(isOpen);\n    };\n    Emitters.navOpenEmitter.subscribe(cb);\n    return () => {\n      Emitters.navOpenEmitter.unsubscribe(cb);\n    };\n  })\n  return (\n    user.user ?\n      (\n        <Router>\n          <div style={{ minHeight: '100vh', minWidth: '100vw' }}>\n            <SiteHeader />\n            <Sidebar.Pushable>\n              <Sidebar\n                as={Menu}\n                animation='overlay'\n                icon='labeled'\n                inverted\n                onHide={() => setVisible(false)}\n                vertical\n                visible={visible}\n                width='thin'\n                onClick={() => { Emitters.navOpenEmitter.emit(false) }}\n              >\n                <Link to=\"/\">\n                  <Menu.Item as='a'>\n                    <Icon name='home' />\n              Home\n            </Menu.Item>\n                </Link>\n                <Link to=\"/attendance\">\n                  <Menu.Item as='a'>\n                    <Icon name='group' />\n              Attendance\n            </Menu.Item>\n                </Link>\n              </Sidebar>\n              <Sidebar.Pusher dimmed={visible}>\n                <div style={{ minHeight: '90vh', minWidth: '100vw', margin: 0 }}>\n                  <Switch>\n                    <Route path=\"/*\">\n                      <Homepage />\n                    </Route>\n                  </Switch>\n                </div>\n              </Sidebar.Pusher>\n            </Sidebar.Pushable>\n          </div>\n        </Router>)\n      :\n      (<div>\n        <EmailNotFoundErrorModal />\n        <Router>\n          <Switch>\n            <Route path=\"/*\">\n              <SignIn />\n            </Route>\n          </Switch>\n        </Router>\n      </div>)\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\nimport UserProvider from './UserProvider/UserProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <UserProvider>\n      <App />\n    </UserProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}