openapi: '3.0.2'
info:
  title: IDOL API
  description: Internal DTI Organization Logic
  version: '1.0'
paths:
  /allMembers:
    get:
      tags: 
      - 'Members'
      summary: "Returns all members"
      responses:
        '200':
          description: "Successfully returns all members"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IdolMember"
  /allApprovedMembers:
    get:
      tags:
      - 'Members'
      summary: 'Returns all approved members'
      responses:
        '200':
          description: "Successfully returns all approved members"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IdolMember"
  /membersFromAllSemesters:
    get:
      tags:
      - 'Members'
      summary: 'Returns members from all semesters'
      parameters: []
      responses:
        '200':
          description: "Successfully returns members from all semesters"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/IdolMember"
  /setMember:
    post:
      tags:
      - 'Members'
      summary: 'Add new member to the member collection'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IdolMember"
      responses:
        '200':
          description: "Successfully adds the new member"
          content:
            application/json:
              schema:
                type: object
                properties:
                  member: 
                    $ref: "#/components/schemas/IdolMember"
        '403':
          description: "PermissionError: User does not have the permission to add new members."
        '400':
          $ref: "#/components/responses/undefinedEmail"

  /updateMember:
    post:
      tags:
      - 'Members'
      summary: 'Update existing member information'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/IdolMember"
      responses:
        '200':
          description: "Successfully updates the member's information"
          content:
            application/json:
              schema:
                type: object
                properties:
                  member: 
                    $ref: "#/components/schemas/IdolMember"
        '403':
          description: "PermissionError: User does not have the permission to add update this member or the user does not have the permssion to update name/roles."
        '400':
          $ref: "#/components/responses/undefinedEmail"
  /deleteMember:
    delete:
      tags:
      - 'Members'
      summary: 'Delete an existing member'
      parameters:
      - in: path
        name: email
        schema:
          type: string
        required: true
        description: "Email of the member to delete"
      responses:
        '200':
          description: 'Successfully deletes the member.'
        '403':
          description: "PermissionError: User does not have the permission to delete update this member."
        '400':
          $ref: "#/components/responses/undefinedEmail"
  /memberDiffs:
    get:
      tags:
      - 'Members'
      summary: 'Returns the users information difference'
      responses:
        '200':
          description: "Successfully returns the users information difference."
          content:
            application/json:
              schema:
                type: object
                properties:
                  diffs:
                    type: 'array'
                    items:
                      $ref: "#/components/schemas/IdolMemberDiff"
  /reviewMemberDiffs:
    post:
      summary: 'Approves or rejects member information changes'
      parameters: []
      responses:
        '200':
          description: "Successful approves or reverts member information changes."
        '403':
          description: "PermissionError: User does not have the permission to review members information diff."

components:
  schemas:
    IdolMember:
      type: object
      properties:
        netid:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        pronouns:
          type: string
        graduation:
          type: string
        major:
          type: string
        doubleMajor:
          type: string
          nullable: true
        minor:
          type: string
          nullable: true
        website:
          type: string
          nullable: true
        linkedin:
          type: string
          nullable: true
        github:
          type: string
          nullable: true
        hometown:
          type: string
        about:
          type: string
        subteams:
          type: array
          items:
            type: string
        formerSubteams:
          type: array
          items:
            type: string
        role:
          $ref: '#/components/schemas/Role'
        roleDescription:
          $ref: '#/components/schemas/RoleDescription'
      example:
      - netid: "jb2375"
        email: "jb2375@cornell.edu"
        firstName: "Jagger"
        lastName: "Brulato"
        pronouns: ""
        graduation: "May 2021"
        major: "Computer Science"
        website: "https://jagger.netlify.app/"
        linkedin: "https://www.linkedin.com/in/jagger-brulato-896968149/"
        github: "https://github.com/JBoss925/"
        hometown: "Mooresville, NC"
        about: "Hey! I'm Jagger. I'm a senior majoring in CS and Economics. I like to make funk-fusion music, and I do a lot of board sports. I also play a lot of chess (d4 > e4, @Fischer) and Tetris."
        subteams: ["dev-leads"]
        formerSubteams: []
        role: "lead"
        roleDescription: "Lead"
    Role:
      type: string
      enum: [lead, tpm, pm, developer, designer, business]
    RoleDescription:
      type: string
      enum: [Lead, Technical PM, Product Manager, Developer, Designer, Business Analyst]
    IdolMemberDiff:
      type: object
      properties:
        email: 
          type: string
        diffString:
          type: string
  responses:
    undefinedEmail:
      description: "BadRequestError: user with undefined email."

  

